series_list <- c("SH_STA_BRTC", "SH_STA_MORT")
series_data <- lapply(series_list, pull_series_data)
names(series_data) <- series_list
# Define the year thresholds and the latest year for each series
year_thresholds <- c(1990, 2000, 2010, 2015)
# Function to calculate data completeness for each series and create a summary dataframe
calculate_series_completeness <- function(data, start_years) {
total_countries <- length(unique(data$iso3c))
latest_year <- max(data$TimePeriod)
results <- data.frame()
for (start_year in start_years) {
year_data <- data %>%
filter(TimePeriod >= start_year & TimePeriod <= latest_year) %>%
group_by(iso3c) %>%
summarise(years_available = n_distinct(TimePeriod), .groups = 'drop')
complete_countries <- sum(year_data$years_available >= (latest_year - start_year + 1))
proportion_complete <- complete_countries / total_countries
results <- rbind(results, data.frame(
Category = ifelse(proportion_complete >= 0.75, paste("Data from", start_year), "Insufficient data"),
StartYear = start_year,
EndYear = latest_year,
NumberOfCountries = complete_countries,
ProportionOfCountries = proportion_complete
))
}
results
}
# Apply the completeness check and categorization for each series
series_completeness <- lapply(names(series_data), function(name) {
completeness_info <- calculate_series_completeness(series_data[[name]], year_thresholds)
completeness_info$Series = name
return(completeness_info)
})
# Combine all series into one dataframe
completeness_dataframe <- do.call(rbind, series_completeness)
View(completeness_dataframe)
pull_series_data <- function(series_code) {
api_request <- paste('http://unstats.un.org/SDGAPI/v1/sdg/Series/Data?seriesCode=', series_code, '&pageSize=50000', sep="")
data <- content(httr::GET(api_request), "text")
json <- fromJSON(data, flatten = TRUE)
df <- as_tibble(json$data) %>%
mutate(TimePeriod = timePeriodStart) %>%
left_join(unsd_geo, by = c("geoAreaCode" = "M49")) %>%
left_join(select(rg_ctr, country, ISO3 = iso3c, income_level_iso3c, region_iso3c, region), by = "ISO3") %>%
mutate(value = as.numeric(value)) %>%
rename(iso3c = ISO3)
return(df)
}
# Pull data for the specified series
series_list <- c("SH_STA_BRTC", "SH_STA_MORT")
series_data <- lapply(series_list, pull_series_data)
names(series_data) <- series_list
# Define the year thresholds and the latest year for each series
year_thresholds <- c(1990, 2000, 2010, 2015)
# Function to calculate data completeness for each series and summarize
calculate_series_completeness <- function(data, start_years) {
total_countries <- length(unique(data$iso3c))
latest_year <- max(data$TimePeriod)
completeness_results <- list()
for (start_year in start_years) {
year_data <- data %>%
filter(TimePeriod >= start_year & TimePeriod <= latest_year) %>%
group_by(iso3c) %>%
summarise(years_available = n_distinct(TimePeriod), .groups = 'drop')
complete_countries <- sum(year_data$years_available >= (latest_year - start_year + 1))
proportion_complete <- complete_countries / total_countries
completeness_results[[as.character(start_year)]] <- c(complete_countries, proportion_complete)
}
best_year <- which.max(unlist(completeness_results[2]))
best_start_year <- as.numeric(names(completeness_results)[best_year])
completeness_info <- data.frame(
StartYear = best_start_year,
EndYear = latest_year,
NumberOfCountries = completeness_results[[as.character(best_start_year)]][1],
ProportionOfCountries = completeness_results[[as.character(best_start_year)]][2],
Category = paste("Data from", best_start_year)
)
return(completeness_info)
}
# Apply the completeness check and categorization for each series
series_completeness <- lapply(names(series_data), function(name) {
completeness_info <- calculate_series_completeness(series_data[[name]], year_thresholds)
completeness_info$Series = name
return(completeness_info)
})
# Combine all series into one dataframe
completeness_dataframe <- do.call(rbind, series_completeness)
# Display the dataframe
print(completeness_dataframe)
View(completeness_dataframe)
rm(list=ls())
# If Metadata Editor R package is not installed, un-comment the following lines and install the package
# For details, refer to: https://github.com/ihsn/metadataeditr
# install.packages("devtools")
# library(devtools)
# install_github("ihsn/metadataeditr")
library(metadataeditr)
library(dplyr)
library(tidyr)
library(readxl)
library(writexl)
library(stringr)
# Set directory
meta.dir <- "C:/Users/wb599047/OneDrive - WBG/Documents/GitHub/metadata_labor/"
# --- NADA API credentials and catalog URL -------------------------------------
my_keys <- read.csv(paste0(meta.dir, "api_key.csv"))[1,1]
set_api_key(my_keys)  # for metadataeditorqa
set_api_url("https://metadataeditor.worldbank.org/index.php/api/")
set_api_verbose(TRUE)
# ----------- Read in/export existing metadata fields into excel ------------------- #
# Define fields to review
mandatory_str <- c(# String fields
# 1) Mandatory fields
"idno", "name",
"definition_long", "relevance", "measurement_unit",
"statistical_concept", "methodology", "aggregation_method",
# 2) Recommended fields
"release_calendar",
"quality_checks", "quality_note",
"sources_discrepancies", "series_break","limitation",
"derivation", "imputation", "citation_requirement"
)
mandatory_df <- c(# Nested list (data frame) fields
# 1) Mandatory fields
"alternate_identifiers", "aliases", "definition_references",
"contacts","sources","authoring_entity",
# 2) Recommended fields
"disciplines", "acronyms",
"series_groups", "notes", "links",
"statistical_concept_references", "concepts",
"methodology_references", "derivation_references",
"imputation_references","related_indicators",
"compliance", "framework"
)
my_proj_list <-list_projects(filter_collection = c(12), limit=5000)
# my_proj_list <-list_projects(filter_collection = c(1), limit=5000) # WDI collection
my_proj_all <-my_proj_list$response$projects
View(my_proj_all)
my_proj_list <-list_projects(filter_collection = c(13), limit=200)
my_proj_all <-my_proj_list$response$projects
my_proj_all <- filter(my_proj_all, grepl("SL.",study_idno)) %>%
filter(!grepl("hild", title))
View(my_proj_all)
ind_excl <- filter(my_proj_all, grepl("SL.",study_idno)) %>%
filter(grepl("hild", title))
my_proj_list <-list_projects(filter_collection = c(13), limit=200)
my_proj_all <-my_proj_list$response$projects
ind_excl <- filter(my_proj_all, grepl("SL.",study_idno)) %>%
filter(grepl("hild", title))
View(ind_excl)
View(ind_excl)
my_proj_all <- my_proj_all %>%
filter(!idno %in% ind_excl)
my_proj_list <-list_projects(filter_collection = c(13), limit=200)
my_proj_all <-my_proj_list$response$projects
ind_excl <- filter(my_proj_all, grepl("SL.",study_idno)) %>%
filter(grepl("hild", title))
my_proj_all <- my_proj_all %>%
filter(!idno %in% ind_excl)
my_proj_list <-list_projects(filter_collection = c(13), limit=200)
my_proj_all <-my_proj_list$response$projects
ind_sl <- filter(my_proj_all, grepl("SL.",study_idno))
ind_excl <- ind_sl %>%
filter(grepl("hild", title))
my_proj_all <- ind_sl %>%
filter(!idno %in% ind_excl)
my_proj_list <-list_projects(filter_collection = c(13), limit=200)
my_proj_all <-my_proj_list$response$projects
ind_sl <- filter(my_proj_all, grepl("SL.",study_idno))
ind_excl <- ind_sl %>%
filter(grepl("hild", title))
my_proj_all <- ind_sl %>%
filter(!idno %in% ind_excl$idno)
length(nds_list0=ind_excl$idno)
length(ind_excl$idno)
add_to_collection_fn2 <- function(inds_list0, col0) {
for (proj in inds_list0) {
results <- collection_add_projects(collections = col0, # Data 360 collection
projects = proj)
}
}
add_to_collection_fn2(inds_list0=ind_excl$idno, col0=24)
ind_excl$idno
result <- collection_add_projects(collections=24, projects="a3dd70de-6431-4198-892e-b939b85afafd")
?collection_add_projects()
result <- collection_add_projects(collections=c(24), projects="a3dd70de-6431-4198-892e-b939b85afafd")
result <- collection_add_projects(collections=c(24), projects=c("a3dd70de-6431-4198-892e-b939b85afafd"))
result <- collection_add_projects(collections=c(24), projects=c(1273))
View(ind_excl)
?collection_remove_projects()
results <- collection_remove_projects(collections = 13,
projects = c(1273))
for (proj in ind_excl$idno) {
results <- collection_add_projects(collections = 24,
projects = proj)
}
ind_excl$id
for (proj in ind_excl$id) {
results <- collection_add_projects(collections = 24,
projects = proj)
}
for (proj in ind_excl$id) {
results <- collection_remove_projects(collections = 13,
projects = proj)
}
collections_list <-list_collections()
collections_all <- collections_list$response$collections
#  List all projects by my collection
my_proj_list <-list_projects(filter_collection = c(1), limit=5000)
my_proj_all <-my_proj_list$response$projects
View(my_proj_all)
View(my_proj_all[[21]][[1]])
View(my_proj_all)
my_proj_all
inds_list <- my_proj_all$idno # This line extracts all projects in your collection
# Create an empty data frame for string fields
meta_str <- data.frame(matrix(nrow = 1, ncol = length(mandatory_str)))
names(meta_str) <- mandatory_str
# Create an empty list for data frame fields (for projects that has filled-in fields)
meta_df <- list()
# Create an empty list with mandatory column names (for projects that that has no data in the fields)
meta_df_no_data <-list(
# 1) Mandatory fields
alternate_identifiers = data.frame(name=NA, identifier=NA, database=NA, uri=NA, notes=NA),
aliases = data.frame(alias=NA),
definition_references = data.frame(source=NA, uri=NA, note=NA),
contacts = data.frame(name=NA, role=NA, position=NA, affiliation=NA, email=NA, telephone=NA, uri=NA),
sources = data.frame(name=NA, organization=NA, uri=NA, publisher=NA, # Only populates fields specified here.
publication_date=NA, access_date=NA, note=NA), # Nested fields,'Author (Person)', needs to be populated in UI
authoring_entity = data.frame(name=NA, affiliation=NA, abbreviation=NA, email=NA, uri=NA),
# 2) Recommended fields
disciplines = data.frame(id=NA, name=NA, parent_id=NA, vocabulary=NA, uri=NA),
acronyms = data.frame(acronym=NA,expansion=NA, occurrence=NA),
series_groups = data.frame(name=NA, description=NA, version=NA, uri=NA), # Indicator groups
notes = data.frame(note=NA, type=NA),
links = data.frame(type=NA, description=NA, uri=NA),
statistical_concept_references = data.frame(source=NA, uri=NA, note=NA),
concepts = data.frame(name=NA, definition=NA, uri=NA), # Related concepts
methodology_references = data.frame(source=NA, uri=NA, note=NA),
derivation_references = data.frame(source=NA, uri=NA, note=NA),
imputation_references = data.frame(source=NA, uri=NA, note=NA),
related_indicators = data.frame(code=NA, label=NA, uri=NA, relationship=NA, type=NA),
compliance = data.frame(standard=NA, abbreviation=NA, custodian=NA, uri=NA), # Standards
framework = data.frame(
name = NA_character_, abbreviation = NA_character_, custodian = NA_character_,
description = NA_character_, goal_id = NA_character_, goal_name = NA_character_,
goal_description = NA_character_, target_id = NA_character_, target_name = NA_character_,
target_description = NA_character_, indicator_id = NA_character_, indicator_name = NA_character_,
indicator_description = NA_character_, uri = NA_character_, notes = NA_character_
)
)
# Loop through all fields to get metadata and populate them into data frames
# Looping each project
for (ind_index in seq_along(inds_list)) {
# Project id
idno0 <- inds_list[ind_index]
# Get existing metadata from editor
proj <- project_by_idno(idno0)
proj_meta <- proj$response$project$metadata$series_description # get all metadata fields
# Looping each field
# String fields
for (s in mandatory_str) {
# If no data is available, NA will be populated
if (is.null(proj_meta[[s]])||
(is.list(proj_meta[[s]]) && length(proj_meta[[s]]) == 0) ||
(is.list(proj_meta[[s]]) && length(proj_meta[[s]]) == 1 && length(proj_meta[[s]][[1]]) == 0)) {
meta_str[ind_index, s] <- NA
meta_str[ind_index, "proj_idno"] <- idno0
} else { # If data is already available, pull it from editor
meta_str[ind_index, s] <- proj_meta[[s]]
meta_str[ind_index, "proj_idno"] <- idno0
}
}
# Data frame fields - Updated 11/5/2024: some fields in 'framework' cannot be combined since inputs are either character or numeric. Forced it to string column.
# If data is already available, pull it from editor
for (d in mandatory_df) {
if (is.data.frame(proj_meta[[d]]) && ncol(proj_meta[[d]]) > 0) {
# Check if 'goal_id' exists, and if not, add it as a character column
if (!"goal_id" %in% names(proj_meta[[d]])) {
proj_meta[[d]] <- proj_meta[[d]] %>%
mutate(goal_id = NA_character_)
} else {
# Ensure 'goal_id' is of character type
proj_meta[[d]] <- proj_meta[[d]] %>%
mutate(goal_id = as.character(goal_id))
}
# Check if 'target_id' exists, and if not, add it as a character column
if (!"target_id" %in% names(proj_meta[[d]])) {
proj_meta[[d]] <- proj_meta[[d]] %>%
mutate(target_id = NA_character_)
} else {
# Ensure 'target_id' is of character type
proj_meta[[d]] <- proj_meta[[d]] %>%
mutate(target_id = as.character(target_id))
}
meta_df[[d]] <- bind_rows(
meta_df[[d]],
proj_meta[[d]] %>%
mutate(proj_idno = idno0,
ind_idno = proj_meta$idno,
ind_name = proj_meta$name)
)
} else if (is.null(proj_meta[[d]]) ||
is.character(proj_meta[[d]]) ||
(is.list(proj_meta[[d]]) && length(proj_meta[[d]]) == 0) ||
(is.list(proj_meta[[d]]) && length(proj_meta[[d]][[1]]) == 0)) {
meta_df[[d]] <- bind_rows(
meta_df[[d]],
meta_df_no_data[[d]] %>%
mutate(proj_idno = idno0,
ind_idno = proj_meta$idno,
ind_name = proj_meta$name)
)
}
}
}
# View if all fields are exported in right format
View(meta_str)
View(meta_df)
# Add missing columns if there is any
add_missing_columns <- function(meta_df, meta_df_no_data_df) {
missing_columns <- setdiff(names(meta_df_no_data_df), names(meta_df))
for (col in missing_columns) {
meta_df[[col]] <- NA
}
return(meta_df)
}
# Iterate over the lists to add missing columns and drop unnecessary columns
for (i in names(meta_df_no_data)) {
meta_df[[i]] <- add_missing_columns(meta_df[[i]], meta_df_no_data[[i]])
meta_df[[i]] <- meta_df[[i]][c(names(meta_df_no_data[[i]]),"proj_idno","ind_idno","ind_name")]
}
# Place additional columns to identify indicators at the end of data frame
meta_df <-lapply(meta_df, function(x) select(x, -c(proj_idno,ind_idno,ind_name),everything()))
View(meta_str)
View(meta_df)
archived <-list_projects(filter_collection = c(3), limit=5000)
archived <-list_projects(filter_collection = c(3), limit=5000)
# my_proj_list <-list_projects(filter_collection = c(1), limit=5000) # WDI collection
archived_proj <-archived$response$projects
View(archived_proj)
archived <-list_projects(filter_collection = c(24), limit=5000)
# my_proj_list <-list_projects(filter_collection = c(1), limit=5000) # WDI collection
archived_proj <-archived$response$projects
View(archived_proj)
meta_str_final <- filter(meta_df, !proj_idno%in%archived_proj$idno)
archived_proj$idno
meta_str_final <- filter(meta_str, !proj_idno%in%archived_proj$idno)
meta_df_final <- lapply(meta_df, function(df) {
df <- filter(df, !proj_idno%in%archived_proj$idno)
}
)
View(meta_df_final)
test <- meta_df_final$definition_references
View(test)
"0ef81442-9033-4569-bee0-32a83c486d5b" %in% test$proj_idno
"a7e458fb-291a-433d-ac50-acb2bda2dd96" %in% test$proj_idno
proj_idno%in%archived_proj$idno[proj_idno%in%archived_proj$idno%in%test$proj_idno]
archived_proj$idno[proj_idno%in%archived_proj$idno%in%test$proj_idno]
archived_proj$idno[archived_proj$idno%in%test$proj_idno]
archived_proj$idno[!archived_proj$idno%in%test$proj_idno]
meta.dir
writexl::write_xlsx(c("string_fields"=list(meta_str_final), meta_df_final), paste0(meta.dir,"all_metadata_20250121.xlsx"))
View(meta_str_final)
pull_series_data <- function(series_code) {
api_request <- paste('http://unstats.un.org/SDGAPI/v1/sdg/Series/Data?seriesCode=', series_code, '&pageSize=50000', sep="")
data <- content(httr::GET(api_request), "text")
json <- fromJSON(data, flatten = TRUE)
df <- as_tibble(json$data) %>%
mutate(TimePeriod = timePeriodStart) %>%
left_join(unsd_geo, by = c("geoAreaCode" = "M49")) %>%
left_join(select(rg_ctr, country, ISO3 = iso3c, income_level_iso3c, region_iso3c, region), by = "ISO3") %>%
mutate(value = as.numeric(value)) %>%
rename(iso3c = ISO3)
return(df)
}
# Pull data for the specified series
series_list <- c("SH_STA_BRTC", "SH_STA_MORT")
series_data <- lapply(series_list, pull_series_data)
# pull SDG targets
library(dplyr)
library(httr)
library(jsonlite)
library(purrr)
library(tidyr)
library(readxl)
library(wbstats)
# Set directory
sdg.dir<- "C:/Users/wb599047/OneDrive - WBG/Documents/GitHub/sdg3/"
# SDG API
url <- "https://unstats.un.org/sdgs/UNSDGAPIV5/v1/sdg/Goal/8/Target/List?includechildren=true"
t_df <- fromJSON(url) %>% pluck(5) %>% as.data.frame()
# Get ISO3 code from UNSD API
geo_api <- "https://unstats.un.org/sdgs/UNSDGAPIV5/v1/sdg/DataAvailability/CountriesList"
geo_data <- content(httr::GET(geo_api))
unsd_geo <- fromJSON(geo_data, flatten = TRUE)
# Get WB country list and code
rg_ctr <- wb_countries()
# Get the list of indicator code
# For Target 3
ind_api <- "https://unstats.un.org/sdgs/UNSDGAPIV5/v1/sdg/Series/List"
ind_df <- fromJSON(ind_api, flatten=TRUE) %>% as.data.frame()
ind_list <- ind_df %>%
filter(grepl("3",goal)) %>% # Change target number here
filter(!grepl("13",goal)) %>%
unnest(c(goal,target,indicator)) %>%
left_join(select(t_df,target=code, target_desc=description), by="target") %>%
select(target, target_desc, indicator, code, ind_desc=description) %>%
arrange(target,indicator)
# Function to pull and process data for a given series code
pull_series_data <- function(series_code) {
api_request <- paste('http://unstats.un.org/SDGAPI/v1/sdg/Series/Data?seriesCode=', series_code, '&pageSize=50000', sep="")
data <- content(httr::GET(api_request), "text")
json <- fromJSON(data, flatten = TRUE)
df <- as_tibble(json$data) %>%
mutate(TimePeriod = timePeriodStart) %>%
left_join(unsd_geo, by = c("geoAreaCode" = "M49")) %>%
left_join(select(rg_ctr, country, ISO3 = iso3c, income_level_iso3c, region_iso3c, region), by = "ISO3") %>%
mutate(value = as.numeric(value)) %>%
rename(iso3c = ISO3)
return(df)
}
# Pull data for the specified series
series_list <- c("SH_STA_BRTC", "SH_STA_MORT")
series_data <- lapply(series_list, pull_series_data)
# pull SDG targets
library(dplyr)
library(httr)
library(jsonlite)
library(purrr)
library(tidyr)
library(readxl)
library(wbstats)
# Set directory
sdg.dir<- "C:/Users/wb599047/OneDrive - WBG/Documents/GitHub/sdg3/"
# SDG API
url <- "https://unstats.un.org/sdgs/UNSDGAPIV5/v1/sdg/Goal/8/Target/List?includechildren=true"
t_df <- fromJSON(url) %>% pluck(5) %>% as.data.frame()
# Get ISO3 code from UNSD API
geo_api <- "https://unstats.un.org/sdgs/UNSDGAPIV5/v1/sdg/DataAvailability/CountriesList"
geo_data <- content(httr::GET(geo_api))
unsd_geo <- fromJSON(geo_data, flatten = TRUE)
# Get WB country list and code
rg_ctr <- wb_countries()
ind_api <- "https://unstats.un.org/sdgs/UNSDGAPIV5/v1/sdg/Series/List"
ind_df <- fromJSON(ind_api, flatten=TRUE) %>% as.data.frame()
ind_list <- ind_df %>%
filter(grepl("3",goal)) %>% # Change target number here
filter(!grepl("13",goal)) %>%
unnest(c(goal,target,indicator)) %>%
left_join(select(t_df,target=code, target_desc=description), by="target") %>%
select(target, target_desc, indicator, code, ind_desc=description) %>%
arrange(target,indicator)
pull_series_data <- function(series_code) {
api_request <- paste('http://unstats.un.org/SDGAPI/v1/sdg/Series/Data?seriesCode=', series_code, '&pageSize=50000', sep="")
data <- content(httr::GET(api_request), "text")
json <- fromJSON(data, flatten = TRUE)
df <- as_tibble(json$data) %>%
mutate(TimePeriod = timePeriodStart) %>%
left_join(unsd_geo, by = c("geoAreaCode" = "M49")) %>%
left_join(select(rg_ctr, country, ISO3 = iso3c, income_level_iso3c, region_iso3c, region), by = "ISO3") %>%
mutate(value = as.numeric(value)) %>%
rename(iso3c = ISO3)
return(df)
}
series_list <- c("SH_STA_BRTC", "SH_STA_MORT")
series_data <- lapply(series_list, pull_series_data)
detach("package:plyr", unload = TRUE)
# pull SDG targets
library(dplyr)
library(httr)
library(jsonlite)
library(purrr)
library(tidyr)
library(readxl)
library(wbstats)
# Set directory
sdg.dir<- "C:/Users/wb599047/OneDrive - WBG/Documents/GitHub/sdg3/"
# SDG API
url <- "https://unstats.un.org/sdgs/UNSDGAPIV5/v1/sdg/Goal/8/Target/List?includechildren=true"
t_df <- fromJSON(url) %>% pluck(5) %>% as.data.frame()
# Get ISO3 code from UNSD API
geo_api <- "https://unstats.un.org/sdgs/UNSDGAPIV5/v1/sdg/DataAvailability/CountriesList"
geo_data <- content(httr::GET(geo_api))
unsd_geo <- fromJSON(geo_data, flatten = TRUE)
# Get WB country list and code
rg_ctr <- wb_countries()
# Get the list of indicator code
# For Target 3
ind_api <- "https://unstats.un.org/sdgs/UNSDGAPIV5/v1/sdg/Series/List"
ind_df <- fromJSON(ind_api, flatten=TRUE) %>% as.data.frame()
ind_list <- ind_df %>%
filter(grepl("3",goal)) %>% # Change target number here
filter(!grepl("13",goal)) %>%
unnest(c(goal,target,indicator)) %>%
left_join(select(t_df,target=code, target_desc=description), by="target") %>%
select(target, target_desc, indicator, code, ind_desc=description) %>%
arrange(target,indicator)
pull_series_data <- function(series_code) {
api_request <- paste('http://unstats.un.org/SDGAPI/v1/sdg/Series/Data?seriesCode=', series_code, '&pageSize=50000', sep="")
data <- content(httr::GET(api_request), "text")
json <- fromJSON(data, flatten = TRUE)
df <- as_tibble(json$data) %>%
mutate(TimePeriod = timePeriodStart) %>%
left_join(unsd_geo, by = c("geoAreaCode" = "M49")) %>%
left_join(select(rg_ctr, country, ISO3 = iso3c, income_level_iso3c, region_iso3c, region), by = "ISO3") %>%
mutate(value = as.numeric(value)) %>%
rename(iso3c = ISO3)
return(df)
}
series_list <- c("SH_STA_BRTC", "SH_STA_MORT")
series_data <- lapply(series_list, pull_series_data)
